{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { getDocs, query, where } from \"firebase/firestore\";\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\nimport { defaultImages, images, pokemonTypes } from \"../../utils\";\nexport const getUserPokemons = createAsyncThunk(\"pokemon/userList\", async (args, _ref) => {\n  let {\n    getState\n  } = _ref;\n  try {\n    const {\n      app: {\n        userInfo\n      }\n    } = getState();\n    if (!(userInfo !== null && userInfo !== void 0 && userInfo.email)) {\n      return;\n    }\n    const firestoreQuery = query(pokemonListRef, where(\"email\", \"==\", userInfo === null || userInfo === void 0 ? void 0 : userInfo.email));\n    const fetchedPokemons = await getDocs(firestoreQuery);\n    if (fetchedPokemons.docs.length) {\n      const userPokemons = [];\n      fetchedPokemons.forEach(async pokemon => {\n        const pokemons = await pokemon.data().pokemon;\n        // @ts-ignore\n        let image = images[pokemons.id];\n        if (!image) {\n          // @ts-ignore\n          image = defaultImages[pokemons.id];\n        }\n        const types = pokemons.types.map(name => ({\n          // @ts-ignore\n          [name]: pokemonTypes[name]\n        }));\n        userPokemons.push({\n          ...pokemons,\n          firebaseId: pokemon.id,\n          image,\n          types\n        });\n      });\n      return userPokemons;\n    }\n    return [];\n  } catch (err) {\n    console.log(err);\n  }\n});","map":{"version":3,"names":["createAsyncThunk","getDocs","query","where","pokemonListRef","defaultImages","images","pokemonTypes","getUserPokemons","args","getState","app","userInfo","email","firestoreQuery","fetchedPokemons","docs","length","userPokemons","forEach","pokemon","pokemons","data","image","id","types","map","name","push","firebaseId","err","console","log"],"sources":["C:/Users/natha/Desktop/react-pokedex/react-pokedex/src/app/reducers/getUserPokemons.ts"],"sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { getDocs, query, where } from \"firebase/firestore\";\r\nimport { pokemonListRef } from \"../../utils/firebaseConfig\";\r\nimport { defaultImages, images, pokemonTypes } from \"../../utils\";\r\nimport { RootState } from \"../store\";\r\nimport { userPokemonsType } from \"../../utils/types\";\r\nexport const getUserPokemons = createAsyncThunk(\r\n  \"pokemon/userList\",\r\n  async (args, { getState }) => {\r\n    try {\r\n      const {\r\n        app: { userInfo },\r\n      } = getState() as RootState;\r\n      if (!userInfo?.email) {\r\n        return;\r\n      }\r\n      const firestoreQuery = query(\r\n        pokemonListRef,\r\n        where(\"email\", \"==\", userInfo?.email)\r\n      );\r\n      const fetchedPokemons = await getDocs(firestoreQuery);\r\n      if (fetchedPokemons.docs.length) {\r\n        const userPokemons: userPokemonsType[] = [];\r\n        fetchedPokemons.forEach(async (pokemon) => {\r\n          const pokemons = await pokemon.data().pokemon;\r\n          // @ts-ignore\r\n          let image = images[pokemons.id];\r\n          if (!image) {\r\n            // @ts-ignore\r\n            image = defaultImages[pokemons.id];\r\n          }\r\n          const types = pokemons.types.map((name: string) => ({\r\n            // @ts-ignore\r\n            [name]: pokemonTypes[name],\r\n          }));\r\n\r\n          userPokemons.push({\r\n            ...pokemons,\r\n            firebaseId: pokemon.id,\r\n            image,\r\n            types,\r\n          });\r\n        });\r\n        return userPokemons;\r\n      }\r\n      return [];\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }\r\n);\r\n"],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,kBAAkB;AACnD,SAASC,OAAO,EAAEC,KAAK,EAAEC,KAAK,QAAQ,oBAAoB;AAC1D,SAASC,cAAc,QAAQ,4BAA4B;AAC3D,SAASC,aAAa,EAAEC,MAAM,EAAEC,YAAY,QAAQ,aAAa;AAGjE,OAAO,MAAMC,eAAe,GAAGR,gBAAgB,CAC7C,kBAAkB,EAClB,OAAOS,IAAI,WAAmB;EAAA,IAAjB;IAAEC;EAAS,CAAC;EACvB,IAAI;IACF,MAAM;MACJC,GAAG,EAAE;QAAEC;MAAS;IAClB,CAAC,GAAGF,QAAQ,EAAe;IAC3B,IAAI,EAACE,QAAQ,aAARA,QAAQ,eAARA,QAAQ,CAAEC,KAAK,GAAE;MACpB;IACF;IACA,MAAMC,cAAc,GAAGZ,KAAK,CAC1BE,cAAc,EACdD,KAAK,CAAC,OAAO,EAAE,IAAI,EAAES,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEC,KAAK,CAAC,CACtC;IACD,MAAME,eAAe,GAAG,MAAMd,OAAO,CAACa,cAAc,CAAC;IACrD,IAAIC,eAAe,CAACC,IAAI,CAACC,MAAM,EAAE;MAC/B,MAAMC,YAAgC,GAAG,EAAE;MAC3CH,eAAe,CAACI,OAAO,CAAC,MAAOC,OAAO,IAAK;QACzC,MAAMC,QAAQ,GAAG,MAAMD,OAAO,CAACE,IAAI,EAAE,CAACF,OAAO;QAC7C;QACA,IAAIG,KAAK,GAAGjB,MAAM,CAACe,QAAQ,CAACG,EAAE,CAAC;QAC/B,IAAI,CAACD,KAAK,EAAE;UACV;UACAA,KAAK,GAAGlB,aAAa,CAACgB,QAAQ,CAACG,EAAE,CAAC;QACpC;QACA,MAAMC,KAAK,GAAGJ,QAAQ,CAACI,KAAK,CAACC,GAAG,CAAEC,IAAY,KAAM;UAClD;UACA,CAACA,IAAI,GAAGpB,YAAY,CAACoB,IAAI;QAC3B,CAAC,CAAC,CAAC;QAEHT,YAAY,CAACU,IAAI,CAAC;UAChB,GAAGP,QAAQ;UACXQ,UAAU,EAAET,OAAO,CAACI,EAAE;UACtBD,KAAK;UACLE;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;MACF,OAAOP,YAAY;IACrB;IACA,OAAO,EAAE;EACX,CAAC,CAAC,OAAOY,GAAG,EAAE;IACZC,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;EAClB;AACF,CAAC,CACF"},"metadata":{},"sourceType":"module","externalDependencies":[]}