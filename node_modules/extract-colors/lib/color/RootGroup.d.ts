import Color from './Color';
import BudGroup from './BudGroup';
/**
 * RootGroup colors with algorithms to optimize and merge neighbors colors.
 *
 * @class
 * @classdesc Manage list of colors or groups.
 */
export default class RootGroup {
    _count: number;
    _children: {
        [key: number]: RootGroup | BudGroup;
    };
    _maxWeight: number | undefined;
    /**
     * Store colors or groups and _count similiar groups in the image.
     */
    constructor();
    /**
     * Add a key for a color, this key is a simplification to find neighboring colors.
     * Neighboring colors has same key.
     */
    addRootGroup(key: number): RootGroup;
    /**
     * Get list of groups of list of colors.
     */
    getList(): (BudGroup | RootGroup)[];
    /**
     * Add a key for a color, this key is a simplification to find neighboring colors.
     * Neighboring colors has same key.
     */
    addBudGroup(key: number): BudGroup;
    /**
     * Max color weight between the list colors, depends of his saturation and his _count.
     */
    getMaxWeight(_count: number): number;
    /**
     * Color with the the max weight between the list colors, depends of his saturation and his _count.
     */
    getMaxWeightColor(_count: number): Color;
    /**
     * Max _count of colors for a group of colors.
     */
    getMaxCountColor(): Color;
    /**
     * List of colors sorted by importance (neighboring hare calculated by distance and removed).
     * Importance is calculated with the saturation and _count of neighboring colors.
     */
    getColors(_distance: number, _count: number): Color[];
}
